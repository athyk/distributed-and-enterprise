# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import auth_pb2 as auth__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in auth_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UserRegister = channel.unary_unary(
                '/Auth/UserRegister',
                request_serializer=auth__pb2.RegistrationRequest.SerializeToString,
                response_deserializer=auth__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.UserLogin = channel.unary_unary(
                '/Auth/UserLogin',
                request_serializer=auth__pb2.LoginRequest.SerializeToString,
                response_deserializer=auth__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.UserLoginVerification = channel.unary_unary(
                '/Auth/UserLoginVerification',
                request_serializer=auth__pb2.LoginVerificationRequest.SerializeToString,
                response_deserializer=auth__pb2.LoginVerificationResponse.FromString,
                _registered_method=True)
        self.UserGet = channel.unary_unary(
                '/Auth/UserGet',
                request_serializer=auth__pb2.GetRequest.SerializeToString,
                response_deserializer=auth__pb2.GetResponse.FromString,
                _registered_method=True)
        self.UserUpdate = channel.unary_unary(
                '/Auth/UserUpdate',
                request_serializer=auth__pb2.UpdateRequest.SerializeToString,
                response_deserializer=auth__pb2.Response.FromString,
                _registered_method=True)
        self.UserDelete = channel.unary_unary(
                '/Auth/UserDelete',
                request_serializer=auth__pb2.DeleteRequest.SerializeToString,
                response_deserializer=auth__pb2.Response.FromString,
                _registered_method=True)


class AuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UserRegister(self, request, context):
        """UserRegister allows the registration of a user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserLogin(self, request, context):
        """UserLogin allows the login of a user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserLoginVerification(self, request, context):
        """UserLoginVerification allows the verification of a user.

        This can be /login/verify or /register/verify depending on the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserGet(self, request, context):
        """UserGet allows the retrieval of a user, containing the filters for the users to be returned.

        The filters are optional, at least one filter must be provided.

        The page and limit are optional, with the default page being 0 and the default limit being 50.

        This is intended for admin or self use.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserUpdate(self, request, context):
        """UserUpdate allows the updating of a user.

        Send the user object with the total changes to be made. INCLUDE all fields, even if they are not changing.

        It does not return the changes to the user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserDelete(self, request, context):
        """UserDelete allows the deletion of a user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UserRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.UserRegister,
                    request_deserializer=auth__pb2.RegistrationRequest.FromString,
                    response_serializer=auth__pb2.LoginResponse.SerializeToString,
            ),
            'UserLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.UserLogin,
                    request_deserializer=auth__pb2.LoginRequest.FromString,
                    response_serializer=auth__pb2.LoginResponse.SerializeToString,
            ),
            'UserLoginVerification': grpc.unary_unary_rpc_method_handler(
                    servicer.UserLoginVerification,
                    request_deserializer=auth__pb2.LoginVerificationRequest.FromString,
                    response_serializer=auth__pb2.LoginVerificationResponse.SerializeToString,
            ),
            'UserGet': grpc.unary_unary_rpc_method_handler(
                    servicer.UserGet,
                    request_deserializer=auth__pb2.GetRequest.FromString,
                    response_serializer=auth__pb2.GetResponse.SerializeToString,
            ),
            'UserUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.UserUpdate,
                    request_deserializer=auth__pb2.UpdateRequest.FromString,
                    response_serializer=auth__pb2.Response.SerializeToString,
            ),
            'UserDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.UserDelete,
                    request_deserializer=auth__pb2.DeleteRequest.FromString,
                    response_serializer=auth__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Auth', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UserRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/UserRegister',
            auth__pb2.RegistrationRequest.SerializeToString,
            auth__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UserLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/UserLogin',
            auth__pb2.LoginRequest.SerializeToString,
            auth__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UserLoginVerification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/UserLoginVerification',
            auth__pb2.LoginVerificationRequest.SerializeToString,
            auth__pb2.LoginVerificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UserGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/UserGet',
            auth__pb2.GetRequest.SerializeToString,
            auth__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UserUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/UserUpdate',
            auth__pb2.UpdateRequest.SerializeToString,
            auth__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UserDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/UserDelete',
            auth__pb2.DeleteRequest.SerializeToString,
            auth__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
