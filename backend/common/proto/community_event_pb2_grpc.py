# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import community_event_pb2 as community__event__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in community_event_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CommunityEventStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateEvent = channel.unary_unary(
                '/CommunityEvent/CreateEvent',
                request_serializer=community__event__pb2.EventDataRequest.SerializeToString,
                response_deserializer=community__event__pb2.CreateResponse.FromString,
                _registered_method=True)
        self.ViewOneEvent = channel.unary_unary(
                '/CommunityEvent/ViewOneEvent',
                request_serializer=community__event__pb2.ViewOneRequest.SerializeToString,
                response_deserializer=community__event__pb2.ViewResponse.FromString,
                _registered_method=True)
        self.ViewEvents = channel.unary_unary(
                '/CommunityEvent/ViewEvents',
                request_serializer=community__event__pb2.ViewRequest.SerializeToString,
                response_deserializer=community__event__pb2.ViewResponse.FromString,
                _registered_method=True)
        self.ViewGlobalEvents = channel.unary_unary(
                '/CommunityEvent/ViewGlobalEvents',
                request_serializer=community__event__pb2.ViewGlobalRequest.SerializeToString,
                response_deserializer=community__event__pb2.ViewResponse.FromString,
                _registered_method=True)
        self.EditEvent = channel.unary_unary(
                '/CommunityEvent/EditEvent',
                request_serializer=community__event__pb2.EditEventRequest.SerializeToString,
                response_deserializer=community__event__pb2.EventResponse.FromString,
                _registered_method=True)
        self.DeleteEvent = channel.unary_unary(
                '/CommunityEvent/DeleteEvent',
                request_serializer=community__event__pb2.DeleteEventRequest.SerializeToString,
                response_deserializer=community__event__pb2.EventResponse.FromString,
                _registered_method=True)


class CommunityEventServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateEvent(self, request, context):
        """CreateEvent creates an event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewOneEvent(self, request, context):
        """ViewOneEvent views one specific event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewEvents(self, request, context):
        """ViewEvents fetches a select amount of community specified events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ViewGlobalEvents(self, request, context):
        """ViewGlobalEvents fetches a select amount of global community events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditEvent(self, request, context):
        """EditEvent modifies an event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEvent(self, request, context):
        """DeleteEvent removes an event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommunityEventServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEvent,
                    request_deserializer=community__event__pb2.EventDataRequest.FromString,
                    response_serializer=community__event__pb2.CreateResponse.SerializeToString,
            ),
            'ViewOneEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewOneEvent,
                    request_deserializer=community__event__pb2.ViewOneRequest.FromString,
                    response_serializer=community__event__pb2.ViewResponse.SerializeToString,
            ),
            'ViewEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewEvents,
                    request_deserializer=community__event__pb2.ViewRequest.FromString,
                    response_serializer=community__event__pb2.ViewResponse.SerializeToString,
            ),
            'ViewGlobalEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ViewGlobalEvents,
                    request_deserializer=community__event__pb2.ViewGlobalRequest.FromString,
                    response_serializer=community__event__pb2.ViewResponse.SerializeToString,
            ),
            'EditEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.EditEvent,
                    request_deserializer=community__event__pb2.EditEventRequest.FromString,
                    response_serializer=community__event__pb2.EventResponse.SerializeToString,
            ),
            'DeleteEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEvent,
                    request_deserializer=community__event__pb2.DeleteEventRequest.FromString,
                    response_serializer=community__event__pb2.EventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CommunityEvent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('CommunityEvent', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CommunityEvent(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CommunityEvent/CreateEvent',
            community__event__pb2.EventDataRequest.SerializeToString,
            community__event__pb2.CreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewOneEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CommunityEvent/ViewOneEvent',
            community__event__pb2.ViewOneRequest.SerializeToString,
            community__event__pb2.ViewResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CommunityEvent/ViewEvents',
            community__event__pb2.ViewRequest.SerializeToString,
            community__event__pb2.ViewResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ViewGlobalEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CommunityEvent/ViewGlobalEvents',
            community__event__pb2.ViewGlobalRequest.SerializeToString,
            community__event__pb2.ViewResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EditEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CommunityEvent/EditEvent',
            community__event__pb2.EditEventRequest.SerializeToString,
            community__event__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/CommunityEvent/DeleteEvent',
            community__event__pb2.DeleteEventRequest.SerializeToString,
            community__event__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
