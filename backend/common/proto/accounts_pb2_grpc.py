# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import accounts_pb2 as accounts__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in accounts_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AccountsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/Accounts/Register',
                request_serializer=accounts__pb2.RegistrationRequest.SerializeToString,
                response_deserializer=accounts__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/Accounts/Login',
                request_serializer=accounts__pb2.LoginRequest.SerializeToString,
                response_deserializer=accounts__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Get = channel.unary_unary(
                '/Accounts/Get',
                request_serializer=accounts__pb2.GetRequest.SerializeToString,
                response_deserializer=accounts__pb2.GetResponse.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/Accounts/Update',
                request_serializer=accounts__pb2.UpdateRequest.SerializeToString,
                response_deserializer=accounts__pb2.Response.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/Accounts/Delete',
                request_serializer=accounts__pb2.DeleteRequest.SerializeToString,
                response_deserializer=accounts__pb2.Response.FromString,
                _registered_method=True)


class AccountsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Register allows the registration of a user.

        If OTP is not sent, the user will be emailed with the code.
        If a valid OTP is sent, the user will be logged in, ensure other fields are correct.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Login allows the login of a user,

        If OTP is not sent, the user will be emailed with the code.
        If a valid OTP is sent, the user will be logged in, ensure other fields are correct.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Get allows the retrieval of a user, containing the filters for the users to be returned.

        The filters are optional, at least one filter must be provided.

        The page and limit are optional, with the default page being 0 and the default limit being 50.

        This is intended for admin or self use.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Update allows the updating of a user.

        Send the user object with the total changes to be made. INCLUDE all fields, even if they are not changing.

        It does not return the changes to the user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Delete allows the deletion of a user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=accounts__pb2.RegistrationRequest.FromString,
                    response_serializer=accounts__pb2.LoginResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=accounts__pb2.LoginRequest.FromString,
                    response_serializer=accounts__pb2.LoginResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=accounts__pb2.GetRequest.FromString,
                    response_serializer=accounts__pb2.GetResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=accounts__pb2.UpdateRequest.FromString,
                    response_serializer=accounts__pb2.Response.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=accounts__pb2.DeleteRequest.FromString,
                    response_serializer=accounts__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Accounts', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Accounts', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Accounts(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounts/Register',
            accounts__pb2.RegistrationRequest.SerializeToString,
            accounts__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounts/Login',
            accounts__pb2.LoginRequest.SerializeToString,
            accounts__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounts/Get',
            accounts__pb2.GetRequest.SerializeToString,
            accounts__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounts/Update',
            accounts__pb2.UpdateRequest.SerializeToString,
            accounts__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Accounts/Delete',
            accounts__pb2.DeleteRequest.SerializeToString,
            accounts__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
