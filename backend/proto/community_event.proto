syntax = "proto3";

// EventDataRequest sends the necessary data for the event to be created/modified
message EventDataRequest {
    // user_id is who is performing the request
    int32 user_id = 1;
    // community_id is the specified community the event is linked to
    int32 community_id = 2;
    // title of the event
    string title = 3;
    // description of the event
    string description = 4;
    // location in text of the event
    string location = 5;
    // datetime of when the event will be happening
    string datetime = 6;
    // duration of the event in hours
    int32 duration = 7;
    // tags to be applied to the event
    repeated int32 tags = 8;
}

// EventResponse is the basic return data needed for every response
message EventResponse {
    // success is a flag to indicate if the message was successfully sent.
    bool success = 1;
    // http status is the integer response of the request results whilst following the http code format
    int32 http_status = 2;
    // error is the error message if there was an error sending the message, it is empty if the message was successfully sent.
    repeated string error_message = 3;
}

// CreateResponse returns the event_id if successfully created
message CreateResponse{
    // status is the basic data that all return messages should have
    EventResponse status = 1;
    // event_id is the unique id to return saying it was successful (x < 0) or not (x == 0)
    int32 event_id = 2;
}

// ViewEvent is the format for returning all the specified events' data
message ViewEvent {
    // id is the unique identifier for the event
    int32 id = 1;
    // community_id is the specified community the event is linked to
    int32 community_id = 2;
    // title of the event
    string title = 3;
    // description of the event
    string description = 4;
    // location in text of the event
    string location = 5;
    // datetime of when the event will be happening
    string datetime = 6;
    // duration of the event in hours
    int32 duration = 7;
    // tags to be applied to the event
    repeated string tags = 8;
    // latitude of the event location (generated by API request)
    optional float latitude = 9;
    // longitude of the event location (generated by API request)
    optional float longitude = 10;
}

// ViewOneRequest requests one event from the database for a specific user
message ViewOneRequest {
    // user_id is who is performing the request
    int32 user_id = 1;
    // community_id is where to fetch the event
    int32 community_id = 2;
    // event_id is the specified event to get
    int32 event_id = 3;
}

// ViewRequest using limit and offset fetches a group of events within a specific community
message ViewRequest {
    // community_id is used to specify what community the event belongs to
    int32 community_id = 1;
    // user_id is used to check if the user is in the community only if community is private
    int32 user_id = 2;
    // offset is the position to start fetching event data in date order
    // this is to skip fetching more recent events when already fetched
    int32 offset = 3;
    // limit is the number of events to fetch from the offset
    int32 limit = 4;
}

// ViewGlobalRequest using limit and offset fetches a group of events from global communities
message ViewGlobalRequest {
    // offset is the position to start fetching events data in date order
    // this is to skip fetching more recent events when already fetched
    int32 offset = 1;
    // limit is the number of events to fetch from the offset
    int32 limit = 2;
}

// ViewResponse returns a list of events that were fetched in the community service
message ViewResponse {
    // status is the basic data that all return messages should have
    EventResponse status = 1;
    // event is the requested data to return
    repeated ViewEvent event = 2;
}

// EditEventRequest is the request to change a message
message EditEventRequest {
    // event_id is the targeted event
    int32 event_id = 1;
    // event_data is an object of EventDataRequest that has all the necessary data to modify
    EventDataRequest event_data = 2;
}

// DeleteEventRequest is the request to delete the specified event
message DeleteEventRequest {
    // user_id is who is performing the request
    int32 user_id = 1;
    // community_id is where to fetch the event
    int32 community_id = 2;
    // event_id is the targeted event
    int32 event_id = 3;
}

service CommunityEvent {
    // CreateEvent creates an event
    rpc CreateEvent(EventDataRequest) returns (CreateResponse) {}
    // ViewOneEvent views one specific event
    rpc ViewOneEvent(ViewOneRequest) returns (ViewResponse) {}
    // ViewEvents fetches a select amount of community specified events
    rpc ViewEvents(ViewRequest) returns (ViewResponse) {}
    // ViewGlobalEvents fetches a select amount of global community events
    rpc ViewGlobalEvents(ViewGlobalRequest) returns (ViewResponse) {}
    // EditEvent modifies an event
    rpc EditEvent(EditEventRequest) returns (EventResponse) {}
    // DeleteEvent removes an event
    rpc DeleteEvent(DeleteEventRequest) returns (EventResponse) {}
}
