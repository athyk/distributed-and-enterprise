syntax = "proto3";

// User is the user object that is returned, containing all the user's information.
//
// password is not returned in the user object. This is to prevent the password from being sent to the client.
//
// This also returns the user's tags, which are the tags that the user has applied to themselves.
message User {
    // id is the user's unique id.
    string id = 1;
    // email is unique and represents the user's email.
    string email = 2;
    // email_verified is a int that determines whether a user has a verified their email.
    //
    // 0 - ignored, 1 - unverified, 2 - verified
    //
    // Int is used over bool, to allow fetching the user's email verification status.
    int32 email_verified = 3;
    // full_name is the full name of the user. This includes first and last name.
    // Intended forf performance, as it does not require a join to get the full name.
    string full_name = 4;
    // first_name is the user's first real name.
    string first_name = 5;
    // last_name is the user's last real name.
    string last_name = 6;
    // nickname is the user's display name.
    string nickname = 7;
    // Gender has no length restraint, but is the user's self-identified gender.
    string gender = 8;
    // dob is the date of birth of the user, in unix time.
    int64 dob = 9;
    // picture_url is the link to the user's profile picture.
    //
    // It's a reference to the picture, not the picture itself.
    string picture_url = 10;
    // degree_id is the degree that user is majoring/taking. This assumes it was pre-validated.
    string degree_id = 11;
    // year_of_study is the year of study of the user, for example 1 is first year, 2 is second year.
    int32 year_of_study = 12;
    // grad_date is the date when the user is expected to graduate, for example 11th of May 2025.
    int64 grad_date = 13;
    // tags is a list of tag ids that the user applied to themselves.
    repeated string tags = 14;
    // created_at is the time the user was created in unix time.
    int64 created_at = 15;
    // updated_at is the time the user was last updated in unix time.
    int64 updated_at = 16;
}

// RegistrationRequest allows the registration/creation of a user.
message RegistrationRequest {
    // email is the email of the user
    string email = 1;
    // password is the plain text password of the user, hashing is done in the service
    string password = 2;
    // first_name of the user
    string first_name = 3;
    // last_name of the user
    string last_name = 4;
    // nickname is the display name of the user
    string nickname = 11;
    // dob is date of birth, in unix time
    int64 dob = 5;
    // gender is a string in lower case, e.g. male, female, other
    string gender = 6;
    // degree is the users current degree id, this expects the degree to be pre-validated before sending
    // the request.
    string degree = 7;
    // year_of_study is the current users year of study
    // Min value is 1, max value is 8
    int32 year_of_study = 8;
    // grad_date is the expected graduation of the user, in unix time
    int64 grad_date = 9;
    // tag is a list of tags that the user applied to themselves
    repeated string tags = 10;
}

// LoginRequest is used to log in a user.
//
// For development requests provide skip_email = true for the email verification to be skipped.
message LoginRequest {
    // email is the username for the account
    string email = 1;
    // password is the password for the account
    string password = 2;
    // skip_email is for debugging to circumvent the email verification, in the case env details not set
    // TODO: Remove this after "prototype" (basically temporary and only used in development)
    bool skip_email = 3;
}

// LoginResponse is the response to a login and registration request, stating if an OTP will be entered by the user and the user object if not.
//
// As both login and registration are similar, they are combined into one response.
//
// TODO: Cookies etc
message LoginResponse {
    // success is a flag to indicate if the message was successfully sent.
    bool success = 1;
    // http status is the integer response of the request results whilst following the http code format
    int32 http_status = 2;
    // error is the error message if there was an error sending the message, it is empty if the message was successfully sent.
    repeated string error_message = 3;
    // user_id is the user id to return to handle the email requests and avoid password being resent.
    //
    // This is present in both cases.
    string user_id = 4;
    // user is the user object that is returned if the user is logged in.
    User user = 5;
    // otp_required is a flag to indicate if the user needs to enter an OTP to login.
    bool otp_required = 6;
}

// LoginVerificationRequest is the request for additional user verification for both login and registration.
//
// This not in LoginRequest as the email verification must be done after password verification.
message LoginVerificationRequest {
    // user_id is the user id to verify the email for.
    string user_id = 1;
    // otp is the one time password to verify the email.
    // this is a string to allow for any type of OTP, e.g. numbers, letters, symbols.
    string otp = 2;
}

// LoginVerificationResponse is the response to the verification request.
// TODO: Cookies etc
message LoginVerificationResponse {
    // success is a flag to indicate if the message was successfully sent.
    bool success = 1;
    // http status is the integer response of the request results whilst following the http code format
    int32 http_status = 2;
    // error is the error message if there was an error sending the message, it is empty if the message was successfully sent.
    repeated string error_message = 3;
    // user is the user object that is returned if the user is logged in.
    User user = 5;
}

// GetRequest is the request, containing the filters for the users to be returned.
//
// The filters are optional, at least one filter must be provided.
//
// The page and limit are optional, with the default page being 0 and the default limit being 50.
// TODO: Maybe user id for auditing logging?
message GetRequest {
    string id = 1;
    string email = 2;
    string nickname = 3;
    string first_name = 4;
    string last_name = 5;
    // email_verified is a int that determines whether a user has a verified their email.
    //
    // 0 - ignored, 1 - unverified, 2 - verified
    //
    // Int is used over bool, as a get request can be used to get the user's email verification status.
    int32 email_verified = 6;
    // page is the page number to return, starting from 0.
    string page = 7;
    // limit is the number of users to return per page. The maximum limit is 50.
    string limit = 8;
}

// GetResponse is the response for GetRequest showing all users.
message GetResponse {
    repeated User users = 1;
    int32 total = 2;
}

message UpdateRequest {
    // user is the user object to update.
    User user = 1;
    // is_self is a flag to indicate if the user is updating themselves.
    //
    // this would then require the user to have an OTP to delete themselves.
    //
    // Otherwise, it's an admin updating a user and an OTP is not yet required.
    bool is_self = 2;
    // otp is the one time password to verify the request was made by the user.
    // this is a string to allow for any type of OTP, e.g. numbers, letters, symbols.
    string otp = 3;
}

// Response is the response for general auth, it does not contain any user information.
message Response {
    // success is a flag to indicate if the message was successfully sent.
    bool success = 1;
    // http status is the integer response of the request results whilst following the http code format
    int32 http_status = 2;
    // error is the error message if there was an error sending the message, it is empty if the message was successfully sent.
    repeated string error_message = 3;
}

// DeleteRequest is the request for deleting a user, only the user id is required.
message DeleteRequest {
    // id is the user id to delete.
    string id = 1;
    // is_self is a flag to indicate if the user is deleting themselves.
    //
    // this would then require the user to have an OTP to delete themselves.
    //
    // Otherwise, it's an admin deleting a user and an OTP is not yet required.
    bool is_self = 2;
    // otp is the one time password to verify the request was made by the user.
    // this is a string to allow for any type of OTP, e.g. numbers, letters, symbols.
    string otp = 3;
}


service Auth {
    // UserRegister allows the registration of a user.
    rpc UserRegister(RegistrationRequest) returns (LoginResponse) {}
    // UserLogin allows the login of a user.
    rpc UserLogin(LoginRequest) returns (LoginResponse) {}
    // UserLoginVerification allows the verification of a user.
    //
    // This can be /login/verify or /register/verify depending on the request.
    rpc UserLoginVerification(LoginVerificationRequest) returns (LoginVerificationResponse) {}
    // UserGet allows the retrieval of a user, containing the filters for the users to be returned.
    //
    // The filters are optional, at least one filter must be provided.
    //
    // The page and limit are optional, with the default page being 0 and the default limit being 50.
    //
    // This is intended for admin or self use.
    rpc UserGet(GetRequest) returns (GetResponse) {}
    // UserUpdate allows the updating of a user.
    //
    // Send the user object with the total changes to be made. INCLUDE all fields, even if they are not changing.
    //
    // It does not return the changes to the user.
    rpc UserUpdate(UpdateRequest) returns (Response) {}
    // UserDelete allows the deletion of a user.
    rpc UserDelete(DeleteRequest) returns (Response) {}
}
